if [ ${load_part_bash} ]; then
    [ ${startup_debug} ] && echo " loading" ||:
else
    [ ${startup_debug} ] && echo " skipping" ||:
    return
fi

int_ninjab_available_parts="$int_ninjab_available_parts 1_bash"

# Not really sure if everything here needs v3.x and above. little FIXME
if [ "$bash_version" \< "3.0" ]; then
    return
fi

if [ -d ~/bin ] ; then
    [ ${startup_debug} ] && echo "Adding ~/bin to the start of PATH" ||:
    PATH=~/bin:"${PATH}"
fi

if [ ! -z ${editor} ]; then
    [ ${startup_debug} ] && echo "Exporting EDITOR, SVN_EDITOR and GIT_EDITOR to ${editor}" ||:
    export EDITOR=${editor}
    export SVN_EDITOR=${editor}
    export GIT_EDITOR=${editor}
fi

if [ ! -z ${load_part_bash_hotkeys} ]; then
    [ ${startup_debug} ] && echo "Loading extra keybindings" ||:

    # meta+o will do: previous-line, start-of-line, forward a word, space, FIXME, doesnt work...?
    #bind '"M-o": "\C-p\C-a\M-f "'

    # Make page-up and page-down cycle history that maches
    bind '"\e[5~": history-search-backward'
    bind '"\e[6~": history-search-forward'

    # Alt+arrow behavior
    bind '"\e[1;9D": backward-word'
    bind '"\e[1;9C": forward-word'
    bind '"\e[1;9A": beginning-of-line'
    bind '"\e[1;9B": end-of-line'
fi

if [ ! -z ${load_part_bash_tweek_hotkeys} ]; then
    [ ${startup_debug} ] && echo "Changing tab to cycle, and shift-tab to reverse cycle" ||:

    # Change the tab key to cycle trough completions, and shift-tab for reverse
    bind 'TAB: menu-complete'
    bind '"\e[Z": "\e-1\C-i"'
fi

[ ${startup_debug} ] && echo "Setting misc bash options" ||:
#ulimit -S -c 0          # Don't want any coredumps.
set -o notify           # Notify of job termination immediately.
set -o noclobber        # If set, disallow existing regular files to be overwritten by redirection of output.
#set -o ignoreeof       # The shell will not exit upon reading EOF
#set -o xtrace          # Print commands and their arguments as they are executed. Debug..

shopt -s cdspell        # Try to correct small typos in `cd directory`
shopt -s cdable_vars    # cd to a variable if it cant find a directory in $1 and the var exist.. etc='/etc', cd etc. See cd var section above
shopt -s checkhash      # Let bash check the hash table for the command before executing, if not found try the PATH
shopt -s checkwinsize   # Check and update LINES and COLUMNS after each command
shopt -s sourcepath
shopt -s no_empty_cmd_completion
shopt -s cmdhist        # Try to save multiline commands as one in history
shopt -s histappend histreedit histverify
shopt -s extglob        # Necessary for programmable completion.

[ "$bash_version" \> "4.0" ] && shopt -s autocd # Automatic cd into directory, FIXME (think this was introduced in 4.x and above

# Disable options:
shopt -u mailwarn
unset MAILCHECK         # Don't want the shell to warn me of incoming mail.

##
# bash completion
##
if [ ! -z ${load_part_bash_completions} ]; then
    [ ${startup_debug} ] && echo -n "Loading several bash completions: " ||:
    complete -A hostname   rsh rcp telnet rlogin r ftp ping disk ssh
    complete -A export     printenv
    complete -A variable   export local readonly unset
    complete -A enabled    builtin
    complete -A alias      alias unalias
    complete -A function   function
    complete -A user       su mail finger
    
    complete -A helptopic  help     # Currently, same as builtins.
    complete -A shopt      shopt
    complete -A stopped -P '%' bg
    complete -A job -P '%'     fg jobs disown
    
    complete -A directory  mkdir rmdir
    complete -A directory   -o default cd
    
    # Compression
    [ ${startup_debug} ] && echo -n "compression " ||:
    complete -f -o default -X '*.+(zip|ZIP)'  zip
    complete -f -o default -X '!*.+(zip|ZIP)' unzip
    complete -f -o default -X '*.+(z|Z)'      compress
    complete -f -o default -X '!*.+(z|Z)'     uncompress
    complete -f -o default -X '*.+(gz|GZ)'    gzip
    complete -f -o default -X '!*.+(gz|GZ)'   gunzip
    complete -f -o default -X '*.+(bz2|BZ2)'  bzip2
    complete -f -o default -X '!*.+(bz2|BZ2)' bunzip2
    complete -f -o default -X '!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract

    # Documents - Postscript,pdf,dvi.....
    [ ${startup_debug} ] && echo -n "documents " ||:
    complete -f -o default -X '!*.+(ps|PS)'  gs ghostview ps2pdf ps2ascii
    complete -f -o default -X '!*.+(dvi|DVI)' dvips dvipdf xdvi dviselect dvitype
    complete -f -o default -X '!*.+(pdf|PDF)' acroread pdf2ps
    complete -f -o default -X '!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?(.gz|.GZ|.bz2|.BZ2|.Z))' gv ggv
    complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf
    complete -f -o default -X '!*.tex' tex latex slitex
    complete -f -o default -X '!*.lyx' lyx
    complete -f -o default -X '!*.+(htm*|HTM*)' lynx html2ps firefox
    complete -f -o default -X '!*.+(doc|DOC|xls|XLS|ppt|PPT|sx?|SX?|csv|CSV|od?|OD?|ott|OTT)' openoffice.org
    
    # Multimedia
    [ ${startup_debug} ] && echo -n "multimedia " ||:
    complete -f -o default -X '!*.+(gif|GIF|jp*g|JP*G|bmp|BMP|xpm|XPM|png|PNG)' xv gimp ee gqview
    complete -f -o default -X '!*.+(mp3|MP3)' mpg123 mpg321
    complete -f -o default -X '!*.+(ogg|OGG)' ogg123
    complete -f -o default -X '!*.@(mp[23]|MP[23]|ogg|OGG|wav|WAV|pls|m3u|xm|mod|s[3t]m|it|mtm|ult|flac)' xmms
    complete -f -o default -X '!*.@(mp?(e)g|MP?(E)G|wma|avi|AVI|asf|vob|VOB|bin|dat|vcd|ps|pes|fli|viv|rm|ram|yuv|mov|MOV|qt|QT|wmv|mp3|MP3|ogg|OGG|ogm|OGM|mp4|MP4|wav|WAV|asx|ASX)' vlc
    
    # Misc
    [ ${startup_debug} ] && echo -n "programming " ||:
    complete -f -o default -X '!*.+(py|PY|pyc|PYC)' python
    complete -f -o default -X '!*.+(php|PHP|php5|PHP5)' php

    [ ${startup_debug} ] && echo "ssh " ||:
    [ -f ~/.ssh/config -a ${load_part_bash_completions_sshHostUseConfig:-""} ] && complete -W '$(cat ~/.ssh/config | grep ^Host | cut -d " " -f 2)' ssh
fi

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}

export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n'
export HOSTFILE=${HOME}/.hosts    # Put list of remote hosts in ~/.hosts ...

# FIXME, unsure if any other OS should handle this the same way. LSCOLORS should not be overwritten if set..?
case ${os} in
    Darwin)
	[ ${startup_debug} ] && echo "Loading osx (Darwin) specific color settings" ||:

	export CLICOLOR=1
	export LSCOLORS="ExGxFxdxCxDxDxhbadExEx"
	;;
esac

if [ ! -z ${load_part_bash_history} ]; then
    [ ${startup_debug} ] && echo "Bash history, date/time logging, ignore common, ignore dupes, size" ||:

    export HISTTIMEFORMAT="%F %T > "
    [ -z ${load_part_bash_history_ignoreCommon} ] || export HISTIGNORE="&:[ ]*:bg:fg:ll:ls:ls -l:h:history:ps aux"
    export HISTCONTROL="ignoreboth" # Ignore duplicates and commands starting with a space
    export HISTFILESIZE=${load_part_bash_history_max:-2000}
fi

# Colored man pages
if [ ! -z ${load_part_bash_misccolors} ]; then
    case ${os} in
	Linux)
	    [ ${startup_debug} ] && echo "Set colors in man pages (Linux)" ||:

            export LESS_TERMCAP_mb=$'\E[01;31m' # begin blinking
	    export LESS_TERMCAP_md=$'\E[01;38;5;74m' # begin bold
	    export LESS_TERMCAP_me=$'\E[0m' # end mode
	    export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
	    export LESS_TERMCAP_so=$'\E[38;5;246m' # begin standout-mode - info box
	    export LESS_TERMCAP_ue=$'\E[0m' # end underline
	    export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline
	    ;;
	Darwin)
	    [ ${startup_debug} ] && echo "Set colors in man pages osx (Darwin)" ||:
	    export LESS_TERMCAP_mb=$'\E[01;31m' # begin blinking
	    export LESS_TERMCAP_md=$'\E[01;31m' # begin bold
	    export LESS_TERMCAP_me=$'\E[0m' # end mode
	    export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
	    export LESS_TERMCAP_so=$'\E[01;44m' # begin standout-mode - info box
	    export LESS_TERMCAP_ue=$'\E[0m' # end underline
	    export LESS_TERMCAP_us=$'\E[32m' # begin underline
	    ;;
    esac
    # Make 'env' take away the colors, but still keep the command work with parameters
    env() { [ -z "$1" ] && cat -t <(command env) || command env $@; }
fi

# Less stuff
if which less &> /dev/null ; then
    [ ${startup_debug} ] && echo "Fixes less, more alias, utf-8, more info at status bar" ||:

    alias more='less'
    export PAGER=less
    export LESSCHARSET='utf-8'
    export LESSOPEN='|/usr/bin/lesspipe %s 2>&-'
    export LESS='-i -w -M -X -F -R -P%t?f%f :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
fi
