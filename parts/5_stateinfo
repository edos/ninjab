if [ ${load_part_stateinfo} ]; then
    [ ${startup_debug} ] && echo " loading" ||:
else
    [ ${startup_debug} ] && echo " skipping" ||:
    return
fi

int_ninjab_available_parts="$int_ninjab_available_parts 5_stateinfo"

# Todo
#  * SELinux info

COLOR_WHITE='\033[1;37m'
COLOR_LIGHTGRAY='033[0;37m'
COLOR_GRAY='\033[1;30m'
COLOR_BLACK='\033[0;30m'
COLOR_RED='\033[0;31m'
COLOR_LIGHTRED='\033[1;31m'
COLOR_GREEN='\033[0;32m'
COLOR_LIGHTGREEN='\033[1;32m'
COLOR_BROWN='\033[0;33m'
COLOR_YELLOW='\033[1;33m'
COLOR_BLUE='\033[0;34m'
COLOR_LIGHTBLUE='\033[1;34m'
COLOR_PURPLE='\033[0;35m'
COLOR_PINK='\033[1;35m'
COLOR_CYAN='\033[0;36m'
COLOR_LIGHTCYAN='\033[1;36m'
NC='\033[0m'

# echo -e "${COLOR_YELLOW} ** This text is yellow example ** ${NC}"

trap "__cleanup_interrupt" 2

function __cleanup_interrupt() {
    echo
    echo "Aborting!"
    echo
    stty echo
    exit 1
}

function filler() {
    local char=${1:-'*'}
    local count=${2:-$((${COLUMNS:-78}))}
    printf -vch  "%${count}s" ""
    printf "%s\n" "${ch// /${char}}"
}

function echoi() {
    local headline="${1}: "
    local char='*'

    local len=${3:-$((${COLUMNS:-78}-1))}
    local IFS=$(echo -en "\n\b") # Sets IFS to a newline

    if [ -z "${2}" ]; then
	printf "%-${len}s${char}%s\n" "${char} ${1}"
	return
    fi

    local linecount=$(echo -e "$2" | wc -l | sed -e 's/[^0-9]//g') # osx have some extra spaces in the 'wc' output, take them away

    if [ ${#2} -ge $((${len}-${#headline})) -o ${linecount} -gt 1 ]; then
	echoi "${headline}"

	if [ ! -z ${load_part_stateinfo_maxlines} -a ${linecount} -ge ${load_part_stateinfo_maxlines} ]; then
	    stty -echo
	    if ! int_ninjab_yesno --default yes --charcount 1 --nonewline $(echoi "   ...contains ${linecount} lines, display [Y/n]"); then
		stty echo
		return
	    fi
	    stty echo
	fi

	# Take away colors, convert tabs to spaces, wrap multilines by the screenlength - 12, and then add some spaces at the front of each line
	local str=$(echo "${2}" | sed -e "s:\x1B\[[0-9;]*[mK]::g" | expand | fold -s -w $((${len}-12)) | sed -e 's/^/   /g')
	for l in ${str}; do
	    echoi "  ${l}"
	done
    else
	printf "%-${len}s${char}%s" "${char} ${headline}${2}"
    fi
}

function getOSinfo() {
    local os_version_file=$(find /etc -maxdepth 1 -type f -name '*_version' -o -name '*_release' -o -name '*-version' -o -name '*-release' 2> /dev/null | head -n 1)
    if [ ! -z ${os_version_file} ]; then
	local os_version=$(cat ${os_version_file})
	echo "OS: ${os_version}, from ${os_version_file}"
    else
	echo "OS: No /etc/[_,-][release,version] found"
    fi
    echo "Kernel: $(uname -a)"
}

function folderInfo() {
    echoi "  Full path" "$(pwd)"
    echoi "  Permissions" "$(ls -ld .)"
    echoi "  Directory count" "$(($(find . -maxdepth 1 -type d | wc -l)-1))"
    echoi "  .directory count" "$(find . -maxdepth 1 -type d -name '.*' | wc -l | sed 's/[^0-9]//g')"
    echoi "  File count" "$(find . -maxdepth 1 -type f | wc -l | sed 's/[^0-9]//g')"
    echoi "  .file count" "$(find . -maxdepth 1 -type f -name '.*' | wc -l | sed 's/[^0-9]//g')"
    echoi
    echoi   "Full stat output" "$(stat .)"
}

function gitInfo() {
    if ! which git &> /dev/null; then
	return # Git not available
    fi

    if ! git rev-parse --git-dir &> /dev/null; then
	return # No git repo in here
    fi

    local gitout=$(git status -s 2>&1)
    if [ -z $"{gitout}" ]; then
	local gitout="<< no output >>"
    fi

    echoi
    echoi "GIT"
    echoi "  Git status" "${gitout}"
}

function svnInfo() {
    if ! which svn &> /dev/null; then
        return # Svn not available
    fi

    if [ ! -d .svn ]; then
        return # No valid svn repo here..
    fi

    local svnstatout=$(svn status 2>&1)
    if [ -z "${svnstatout}" ]; then
        local svnstatout="<< no output >>"
    fi

    local svninfoout=$(svn info 2>&1)
    if [ "${svninfoout}" ]; then
        local svninfoout="<< no output >>"
    fi

    echoi
    echoi "SVN"
    echoi "  Svn info" "${svninfoout}"
    echoi
    echoi "  Svn  status" "${svnstatout}"
}

function compressedInfo() {
    local compressedOutput=""
    case $1 in
        *.tar.bz2|*.bz2)            compressedOutput=$(tar -tvjf ${1} 2> /dev/null)     ;;
        *.tar.gz|*.gz|*.tgz|*.Z)    compressedOutput=$(tar -tvzf ${1} 2> /dev/null)     ;;
        *.tar)                      compressedOutput=$(tar -tvf ${1} 2> /dev/null)      ;;
        *.zip)                      compressedOutput=$(unzip -l ${1} 2> /dev/null)      ;;
    esac

    if [ ! -z "${compressedOutput}" ]; then
	echoi "Archive content" "${compressedOutput}"
    fi
}

function getFullPath() {
    local curr_dir=$(pwd)
    if [[ $1 == /* ]]; then
	local dir=$(dirname $1)
    else
	local dir="${curr_dir}/$(dirname $1)"
    fi

    local fname=$(basename $1)
    cd $dir
    local full_path="$(pwd)/$fname"
    cd $curr_dir
    echo $full_path
}

function stateinfo_directory() {
    local folderpath=$(getFullPath "${1}")
    echoi "Info about directory ${folderpath}"
    cd "${folderpath}" &> /dev/null
    if [ $? != 0 ]; then
	echoi " --- Unable to access directory ---"
	return
    fi
    folderInfo
    gitInfo
    svnInfo
    cd - &> /dev/null
}

function stateinfo_file() {
    local filepath=$(getFullPath "${1}")
    #local filename=$(basepath "${filepath}")
    echoi "Info about file ${filepath}"
    echoi "Guessed filetype" "$(file ${filepath})"
    echoi "Full stat output" "$(stat ${filepath})"
    echoi "Open references (lsof)" "$(lsof ${filepath} 2> /dev/null)"
    compressedInfo ${filepath}
}

function stateinfo_general() {
    local username=$(whoami)
    local netstat_tcp=$(netstat -n 2> /dev/null)

    echoi "Current user (${username}):"
    echoi "  Your IDs" "$(id)"
    echoi "  You own" "$(($(ps u -U ${username} | wc -l) - 1)) / $(($(ps ax | wc -l) - 1)) processes"
    echoi
    echoi "System info:"
    echoi "  OS version" "$(getOSinfo)"
    echoi "  Uptime" "$(uptime)"
    echoi "  Current runlevel" "$(who -r | sed -n 's/.*run-level \([0-9]\)/\1/p')"
    echoi "  Current logged in users" "$(users)"
    echoi
    echoi "Network info:"
    echoi "  IPv4 adresses" "$(/sbin/ifconfig 2> /dev/null | awk '/inet / {print $2}'  | sed -e :a -e '$!N;s/\n/, /;ta' -e 's/[^0-9\., ]//g')"
    echoi "  LISTEN connections" "$(echo -e ${netstat_tcp} | grep -o LISTEN | wc -l | sed 's/[^0-9]//g')"
    echoi "  ESTABLISHED connections" "$(echo -e ${netstat_tcp} | grep -o ESTABLISHED | wc -l | sed 's/[^0-9]//g')"
    echoi "  TIME_WAIT connections" "$(echo -e ${netstat_tcp} | grep -o TIME_WAIT | wc -l | sed 's/[^0-9]//g')"
    echoi "  CLOSE_WAIT connections" "$(echo -e ${netstat_tcp} | grep -o CLOSE_WAIT | wc -l | sed 's/[^0-9]//g')"
    echoi
    echoi "Current directory:"
    folderInfo
    gitInfo
    svnInfo
}

function stateinfo() {
    filler
    if [ -z ${1} ]; then
	stateinfo_general
    else
	if test -d "${1}"; then
	    stateinfo_directory "${1}"
	elif test -f "${1}"; then
	    stateinfo_file "${1}"
	else
	    echoi "${1} does not exists or is not a normal directory or file."
	fi
    fi
    filler
}

if [ ! -z ${load_part_stateinfo_alias} ]; then
    a="alias ${load_part_stateinfo_alias}='stateinfo'"
    eval $a
    unset a
fi

trap - 2
